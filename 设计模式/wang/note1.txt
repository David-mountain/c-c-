--基本概念：
遇到的特定问题，固定套路解决，可重用的方案
设计模式，解决常见问题的通用方法
最终实现就是一堆代码
目的是：设计大型项目时候，保证代码模块之间的灵活性和可复用性，都是以增加代码的复杂性为代价
灵活性阐释 有点印象深刻：不需要修改只需要增加代码即可，不就是之前计算的函数指针的案例吗
设计模式也被称为微架构，各种设计模式的组合运用可以生成新的架构
--设计模式中的抽象思维
我的大脑中缺乏 解耦合的代码
每种设计模式 找一套最佳实践的代码 存档
抽象思维概念：(这里是基于面向对象哈)能从事物中抽取出或者说提炼出一些本质的，共性的内容，把这些共性的内容组合到一起(封装)
抽象出一个基类，动物类，后面有动物new出来时候，只需要添加自己的方法和属性即可
当大型复杂项目，其实并不好抽象
抽象思维的目的：
虚函数 纯虚函数 整理 极其重要
抽象思维的检验：不改变现有的代码，通过增加代码来实现变更需求
面向对象程序设计原则之一：单一职责原则--一个类只干好一个事情，只担任一种职责，不然牵扯太多
对比性学习设计模式，先来个差的，再用设计模式好的
不要过度设计，小项目
先有问题，再有设计模式
框架就是半成品 有趣

什么场景使用那种设计模式 最重要！

--------第二节课----------------
认识大型项目 软件开发
微服务架构的设计模式与 设计模式的区别
传统开发：单体架构(一个单一的可执行程序)
微服务解决单个一个可执行程序过度复杂，过度庞大的问题 按照功能进行拆分
本课程针对的是单一可执行程序 下的代码设计
14min
常见的设计模式分类 三大类 
把new对象的代码 单独搞一个接口 如果后面修改不用每个地方都去修改 改这一个接口即可 我最开始不明白项目
中架构为什么要这样写，现在才明白，对于这个设计模式的好处了
建议把对象模型先看了 还有多线程看了 再来看这个就如虎添翼
学设计模式2个问题：这个设计模式怎么写？解决了什么样的问题？在哪个场合下使用
shift + f9 快速监视 忘了都
-------------------