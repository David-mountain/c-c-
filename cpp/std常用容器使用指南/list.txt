# list 
## operator=
            copy(1) list& operator= (const list& x);
            move(2) list& operator= (list&& x); ??
Initializer list(3) list& operator= (initializer_list<value_type> il);

## Element access 
    ### front 
         reference front();
         const_reference front() const;
    ### back 
        reference back();
        const_reference back() const;

## Modifiers  
    ### assign 
           range(1) template <class InputIterator>
                    void assign (InputIterator first, InputIterator last);
            fill(2) void assign (size_type n, const value_type& val);
Initializer list(3) void assign (initializer_list<value_type> il);

    ### emplace 

    ### push_front 
        void push_front (const value_type& val);
        void push_front (value_type&& val);

    ### pop_front 
        void pop_front();

    ### push_back 
        void push_back (const value_type& val);
        void push_back (value_type&& val);

    ### pop_back 
        void pop_back();

    ### insert 
  single element(1) iterator insert (const_iterator position, const value_type& val);
            fill(2) iterator insert (const_iterator position, size_type n, const value_type& val);
           range(3) template <class InputIterator>iterator
                    insert (const_iterator position, InputIterator first, InputIterator last);
            move(4) iterator insert (const_iterator position, value_type&& val);
Initializer list(5) iterator insert (const_iterator position, initializer_list<value_type> il);

    ### erase 
        iterator erase (const_iterator position);
        iterator erase (const_iterator first, const_iterator last);

    ### swap 
        void swap (list& x);

    ### resize 
        void resize (size_type n);
        void resize (size_type n, const value_type& val);

    ### clear 
        void clear() noexcept;

## Operatios 
    ### splice 
           entire list(1) void splice (const_iterator position, list& x);
                          void splice (const_iterator position, list&& x); ??
        single element(2) void splice (const_iterator position, list& x, const_iterator i);
                          void splice (const_iterator position, list&& x, const_iterator i);
         element range(3) void splice (const_iterator position, list& x, const_iterator first, const_iterator last);
                          void splice (const_iterator position, list&& x, const_iterator first, const_iterator last);

    ### remove 
        void remove (const value_type& val);

    ### remove_if 
        template <class Predicate>  
        void remove_if (Predicate pred);

    ### unique 
        void unique();
        template <class BinaryPredicate>
        void unique (BinaryPredicate binary_pred); ??

    ### merge 
        void merge (list& x);  
        void merge (list&& x);
        template <class Compare>  
            void merge (list& x, Compare comp);
        template <class Compare>  
            void merge (list&& x, Compare comp);

    ### sort 
        void sort();
        template <class Compare>  
            void sort (Compare comp);

    ### reverse 
        void reverse() noexcept;





