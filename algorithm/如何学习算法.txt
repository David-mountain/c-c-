算法诞生过程中的思路往往包含了比实际算法更本质得多的知识，实际算法乃至算法的某个特定语言的实现
包含了太多表面的不相干知识，它们会阻碍对本质的理解，这造成了我们大多数人对于算法理解的困难。
就像我自己对刷算法都有一些思考：需要一些前置知识，这些前置知识无比重要，决定了你能不能走通常见算法，坚持下去
当你看到一个问题的时候，也许你立马就联想到了相关的算法，甚至一些编程注意的细节，然而，这起始根本不反映
一个算法的本质，结果想来想去总是停留在问题的表面。
而另一方面，重在思维的传授则可以让人养成从问题本质入手，逐步分析推理的习惯，而不是生搬硬套。
当然，不可否认，联想本身也极其重要，可以说是人类思维最重要的特征。

只不过，养成优先从问题的本质入手进行考察的好习惯 绝对是有更大的好处的！！！
波利亚的《如何解题》绝对算是一本，他的《数学的发现》也值得一看。

深入学习一个算法的来龙去脉，需要做到三件事情：
1. 寻找该算法的原始出处
2. 原始的出处其实也未必就都推心置腹地和你讲得那么到位
3， 不仅学习别人的思路，整理自己的思路也是极其重要的：详见《跟波利亚学解题》的“4. 一个好习惯”和“7. 总结的意义”。


记录只是学习和思考的副作用，只要还在学习和思考，就必然会有新的记录。  这句话好有意思！！！


回顾非递归遍历算法的时候：有了新的收获
  从树根结点传入开始，到找到最左结点，然后弹出，
  然后右结点的时候，又是一棵完整的树，又是一轮新的循环
  树可能只有1个结点，比如右节点只有一个，没有字节点的时候，
  本身就已经抽象出了可穷举的算法了，之前是这被搞蒙了















