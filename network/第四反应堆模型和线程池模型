1
select poll epoll 对比整理 优缺点

2 
epoll反应堆 
将文件描述符 事件 回调函数 封装在一起 
结构体
reactor_1.c代码中
事件驱动结构体 
typedef struct xx_event 
{
	int fd;
	int evnets;
	void (*call_back)(int fd, int events, void *arg);
	void *arg;
	...
}xevent;

xevent myevents[_EVENT_SIZE_ + 1];
定义在全局中，默认是0 

听不太懂了，这里，没有把之前的结合起来
上树，下树 
为什么搞了很多事件呢？
写完，然后又设置成读的事件，读完，又设置成写的事件？

3
epoll_loop.c 
复杂版epoll反应堆代码
跳 

4
线程池概念
例子：有请求了，招人辞退 对比客户端请求，创建子线程，销毁子线程 这样效率不高
搞几个固定的人，即线程，来服务需求

事先创建几个线程
一个任务队列 
线程池中的线程不停的去从任务队列中取任务，有任务到来往任务队列中添加，生产者和消费者模型
线程池和之前的区别就是不会频繁的创建和销毁，当一个需求处理完时候，会一直在这里

任务队列 - 锁 
条件变量 
pthread_cond_wait 解锁 等待条件 条件满足抢锁
pthread_cond_signal 给某一个等待在条件变量的线程发送信号
pthread_cond_broadcast 给所有等待在等待条件变量的线程发送信号

任务队列，用循环队列，不可能无限的
循环队列-用数组实现即可

线程池，事先创建几个线程，不停取任务，如果没有任务休眠，省去了不停的创建线程和销毁线程的事件和资源
注意：线程池处理的任务所 需要处理的时间必须很短，
一般线程数量不宜过多，不宜过少，根据任务的数量动态的增加或减少，不要太多了，综合考虑

线程池：
一个锁 
两个条件变量
循环队列

5 ？
线程池的代码阅读

线程池结构体
任务结构体

创建线程池函数
销毁线程池函数
添加任务到线程池
任务回调函数

6 
继续代码阅读
销毁线程

释放资源

7 
epoll + 线程池

之前的epoll代码修改，

8 
演示 

9
复杂版线程池
跳


10
UDP通信
传输层： TCP/UDP
用户数据报协议 不安全不可靠 丢包不重传 快 不面向连接 邮件模型
协议本身不可靠，但是可以人为加一层协议让它可靠！！！面试题 自己再设计哈

TCP通信流程
服务端 创建流式套接字 绑定 监听 提取 读写 关闭
客户端 创建流式套接字 连接 读写 关闭
收发数据：
read recv 
ssize_t recv(...)  man recv  flags=MSG_PEEK读数据不会删除缓冲区的数据
write send
ssize_t send() flags=1紧急数据

UDP通信流程
服务器 创建报式套接字 绑定 读写 关闭
客户端 创建报式套接字 读写 关闭 
发数据，sendto() man sendto 到哪里去 
收数据，man recvfrom  对方的地址信息 

11 
UDP服务器和客户端代码实现
UDP没有客户端 服务端的分 谁主动发送就是客户端

创建套接字
绑定
读写
关闭

inet_addr()只能用于IPV4
inet_pton()可用于IPV6 V4

UDP 一般是一对一的
多对多，就是多个套接字了
如果是a b ，那接收到是谁的信息呢？一般都是一对一的

代码

12
本地套接字
IPC机制 是在socket的框架上发展出来的一种 
虽然网络socket可用于同一台主机的进程间通讯，但是IPC更有效率，
不需要经过网络协议栈，打包拆包，计算校验和等，只是将应用层数据从一个进程拷贝到另一个进程
这是因为，IPC机制本质上是可靠的通讯，而网络通讯是为不可靠的通讯设计的
UNIX Socket也提供面向流 和 面向数据包 两种API接口，
类似于TCP和UDP，但是面向消息的socket也是可靠的，既不会丢失也不会顺序错乱
UNIX Domain Socket 是全双工的，API接口语义丰富。

套接字用文件来标识，这个文件在绑定之前是不能存在

创建本地套接字
	man socket 
	int socket(int domain, int type, int protocol)
	domain: AF_UNIX
	type: SOCK_STREAM
	protocol: 0
绑定
	int bind()
	struct sockaddr_un 
	{
		sa_family_t sum_fa.. 求这个结构体的大小，不用sizeof怎么求？ 用下面的地址-整个结构体的地址即可
		char sum_path[108];
	}

监听
提取
	accept()
读写
关闭

13
本地套接字实现TCP服务器
跳

14
本地套接字客户端实现
跳



