2
webserver服务器

浏览器                            web server 
www.baidu.com(DNS服务器 域名转IP) 

即使断网，又有一台DNS服务器的，右键-网络 更改适配器设置-以太网 状态 - 详细信息 IPV4 DNS服务器
DNS服务器-域名对应一个IP 浏览器默认80端口 可执行输入IP:80/index.html ==等价于www.baidu.com
这个走的是HTTP协议，应用层的协议，解析你的请求，请求是一个报文麻，
找到请求的文件，如果找到发回去，没有找到404 NOT FOUND

演示： ubuntu启动服务器 然后浏览器访问服务器IP+port
视频中 192.168.21.28:8888 
视频中输入，浏览器结果没有出结果，用的火狐
换成谷歌可以了 

对比FTP服务器 

3
html
如果让你写服务器，你先做什么？
浏览器都是请求网页文件，我们先要了解网页文件html文件是什么样子的？
还要了解HTTP协议，不然你怎么回别人呢？

html文件 超文本标签语句 

4
wireshark抓包工具
有些协议不太懂，怎么办？抓包 
首先需要一个抓包工具 
资料中有各种抓包的集合！！！各种协议 可以看看 但是购买中没有这块的资料

只要经过这个网卡就能抓到，
操作还是比较简单 
抓包工具不要长时间开，会有一个缓存，就存满了内存
开始，暂停 左上角按钮

测试：抓 三次挥手 四次挥手 
先启动一个服务器 然后用三眼怪连接哈 
注意我们现在抓的是以太网网卡的包哈
只要经过以太网的或者以太网出去的 都能抓住

过滤包 
ip.addr == 192.168.21.50 
ip.addr == 192.168.21.50 and tcp.port == 8000
然后看包 哪里是三次挥手 四次握手(第二次和第三次放在一起了)
双击包 数据 
可以看到不同网络层的 信息 物理层-以太网层-网络层-传输层

然后看以太网协议 MAC头多少个字节 看之前的资料了
MAC头 6+6+2等等 
IP头 
你可以看看别人是怎么组包的，这里全是大端哈 对底层网络更加清晰了解
TCP报头 

这里看的是挥手和握手的包，没有数据包

然后继续看看其他的三次挥手，四次握手的包

如果这里不想第二次和第三次放在一起，可以收到之后sleep(1) 延时1秒 就分两次发了！！！

视频中，以前抓飞秋的包，后面加密了，看不懂数据包了

5
抓取HTTP协议
继续演示 抓包
用浏览器访问服务器 我们的服务器ubuntu 
然后访问成功后 就暂停抓包工具  
再过滤协议 ip.addr == 192.168.21.50 and tcp.port == 8000 and http

然后看包 双击进去 看HTTP的请求协议和应答协议和数据

6
http协议
复制出来请求协议
一行一行解释 协议代表的含义
GET/POST 请求方式的区别

demo.html 里面有图片，再去请求，好像是遇到src还是link就会去请求
不是一次性请求给你的

状态码 
100x
200x
300x
400x
500x

http应答
状态行
	HTTP/1.1 200 OK
消息报头
文件的类型-必填
	Content-Type: text/html ... 这个必须组包的 不同文件有所区别的文件类型 必填
文件的长度-可填可不填
	
空行 \r\n 

--
GET /a.txt HTTP/1.1 \r\n
a.txt
判断有没有a.txt 
如果有，发送
	状态行 HTTP/1.1 200M OK \r\n
	消息报头 Content-Type: text/html; charset=utf-8\r\n Content-length: 950 \r\n
	空行
	a.txt
	发送文件 open read write

没有就发送errro.html
	状态行 HTTP/1.1 404  \r\n
	消息报头 Content-Type: text/html; charset=utf-8\r\n Content-length: 950 \r\n
	空行
	errno.html
	发送文件 open read write

pub.c 有http常见文件类型分类
http与浏览器交互时，为使浏览器能够识别文件信息，所以需要传递文件类型，这是响应消息必填项
。。。具体哪些省略 自己看视频资料


7
服务器框架

epoll_web.c 
#define PORT 6666 

创建 套接字 绑定
监听
创建树
将lfd上树
循环监听
收尾 

浏览器测试时候，老是不对，或者是延迟
因为有打印IP，所以可以核对和自己的IP是否一致 


8 
解析请求
代码问题 while()，设置成非阻塞然后测试
成功

拿到请求信息了，然后解析请求
解析请求
判断是否为get请求，get请求才处理
得到浏览请求的文件，如果对方没有请求文件，默认请求./
判断文件是否存在，如果存在-普通文件或者目录 (目录怎么发的？)
不存在 发送error.html

目录发送：
也是一个html,不过是读取了目录，然后加入到一个html文件的li标签中而已 组合好发送即可
如果判断是一个目录，文件存不存在，系统编程中说过 忘记了

请求 苦瓜.txt 可能请求不到，项目中就需要你解决问题的

后面3集都是解析代码了

9
处理普通文件和错误文件

可能是大写GET 小写get 
切换工作目录？获取环境变量 char * path = getEnv("PWD")
strcpy(复制，被复制)
strcat("xxx", "/web-http");

chdir(目录 上面获取组装的); 切换目录

判断请求的文件存不存在 stat
man stat 
请求的是文件还是目录
S_ISREG S_ISDIR(s.mode)
请求完了就会断开，不是长连接的哈

文件存在 先发送报头(状态行 消息头 空行 ) 
发送文件

文件不存在
文件存在 先发送报头(状态行 消息头 空行 ) 
发送error.html 

组装报头时候，不能用strlen，因为万一报头有0，这个长度就有问题

gcc epoll_web.c wrap.c pub.c 
./a.out 

没有关闭，所以浏览器一直在转圈

只要是连接，就是一个新的连接，发送完毕后立即断开了

10 
发送目录
发送列表，就是发送一个网页
头尾标签文件+ 列表

man readdir 
struct dirent {} 目录文件名这个结构体中

scandir 读取目录下的文件
int scandir (const char *dirp, struct dirent ***namelist, 目录 文件信息数组
	int (*filter)(const struct dirent *), 过滤函数
	int (*compar)(const struct dirent **, const struct dirent **)); 排序函数

三级指针namelist,传二级指针的地址，为了在这个函数中改变这个
画图 
a[...]   struct dirent * 每个元素都是一个结构体指针(每个结构体保存一个文件信息)
定义一个指针，保存这个数组的首地址
 struct dirent **list = &a[0] = a;
我要拿这个首元素地址的地址，定义一个三级指针
*三级指针 就是数组的首地址了 这样可以操作数组了

二级指针-指向指针数组的首元素的地址 复习哈

释放： 遍历释放文件结构体 释放文件数组

超链接的时候加上 / 都忘记了 

测试时候发现：
  文件大了缓冲不全，也有点问题  音频导致服务器崩了(火狐没死，谷歌死了，但是火狐也没有缓冲完)
  咋办？没有缓冲完。
  中文的需要转码  转成字节存起来

11 
处理中文请求和发文件问题

苦瓜.txt 
[/%E8%8B%A6....txt]
char buf[128] = { 0xe8, 0x8b, 0xa6, 0xe7...,'.', 't', 'x', 't' };

一个字节 8个bit位 16进制表示-0x?? 一个16进制代表4个二进制位 别忘记了

‘8' -> '8' - '0' = 8 字符8转数字8 
e  'e'-'a'+10 =14
'e8' = ('e'-'a'+10)*16 + ('8'-'0')*1 = 0xe8   ??就是计算成10进制阿 服了

封装了 strdecode()函数 

然后来解决MP3干死服务器的问题：谷歌有这个问题
 套接字，有缓冲区，管道，文件比较大时，可能浏览器这读缓存器比较小，
 如果读端关闭了，写端再写，就SIGPIPE信号，服务器收到这个信号就死掉了！！！
 但这也只是某些浏览器 
 我们只需要服务器代码中忽略这个信号 signal(SIGPIPE, SIG_IGN); #include "signal.h"

大文件缓冲问题？
写缓冲区可能满，写不进去，写不进去监听EPOLLOUT 
将没有发送的数据保存，等写事件触发，写出去 
消息存储未发送的数据，
libevent ?优势 视频声音太吵了

12
libevent 
event_wb.c 文件
似乎就是针对大文件的 之前视频声音有问题 没听清楚

类似axios库 封装好了很多东西

有时间可以看看源代码 怎么实现的


