采用形式： 本文以问题的形式解答自己对于学习知识方法的理解

0. 如何理解大多数人的编程工作？
	♥♥♥ 除了科学家研究的工作，其他编程岗位可以理解成一门手艺，手艺则是熟能生巧，遇到情况多了，经验就丰富了，这告诉我们要编程要多练习

1. 什么才算是掌握了一个知识？
解：
	♥♥♥ 知识框架在心中基本搭建(知道是什么)
	♥♥♥ 能够较熟练练习一些小项目(知道怎么用)
	♥♥♥ 注：上面两条不是线性的，可以是离散的，否则就是学生思维了，编程工作和生活中的大忌

2. 如何高效掌握一个新知识点呢？
解：
	♥♥♥ 搜索理解基本概念和作用
	♥♥♥ 找一套入门视频学习
	♥♥♥ 大量的练习掌握如何应用(巩固知识点)

3. 久了就容易忘记知识点，咋办？
解：
	♥♥♥ 当前学习的能够掌握就很厉害了
	当天学习的晚自习及时巩固
	第二天继续复习
	第三天继续复习
	然后就是周末的大复习
	♥♥♥ (所有的复习都是在理解的基础上学习的，加上小练习就没那么容易忘记了)

4. 对于一个较大工程的知识学习时候，应该如何学习呢？
解：
	♥♥♥ 循序渐进，切勿浮躁
	基础不牢，地动山摇 
	哪个阶段应该学什么，就深入学习什么，除非你确实知识掌握的很好了，可以继续下一关
	例：程序设计这关不过，后面代码实现和算法实现就会困难重重，循序渐进才行
	♥♥♥ 一定要自己做计划 自己的大概进度和水平评价，自己心里有个谱，一次坑不能踩多次，日计划和周计划即可


5. 时间有限的情况下，又应该如何规划学习呢？
解：
	♥♥♥ 选择重点优先学习 比如c/c++语言本身和数据结构 OS 网络
	♥♥♥ 当天学习的知识内容一定要及时巩固，否则就是白学

6. 一天24小时，如何合理规划呢？
解：
	♥♥♥ 早上来，巩固之前的重点难点知识
	♥♥♥ 听课的时候，还是认真听，把昨天的笔记放在旁边，上课知识简单的时候可以看看，即复习+上课
	♥♥♥ 由于我下午一来不想复习，就学习新课程，学习2门，2个小时一门
	♥♥♥ 整理当天所学知识，巩固 晚上最多只能1个小时看视频 另外2个小时必须用来复习
	♥♥♥ 当天作业开始跟了 

7. 遇到学习的难题应该如何处理？
	♥♥♥ 不能退缩，敢于面对
	♥♥♥ 分而治之，先要找出自己哪里不懂，一个一个模块的去理解
	♥♥♥ 当遇到学不会的知识时候，倒回去重新开始这门知识的学习

8. 进步最大的途径是什么？
	♥♥♥ 做项目，改bug
	♥♥ 看书查缺补漏

9. 知识的输入与输出平衡性问题？
	♥♥♥ 不管是看书还是看视频，都是知识的输入
	♥♥♥ 写代码自己思考，或者，写总结，写项目，才是知识的输出 
		这一点我们往往在学习的时候 非常容易忽略掉！！！

10. 自学误区？
	♥♥♥ 不做笔记，不总结
	♥♥♥ 注重理论，不注重实践实操
	♥♥♥ 没耐心，怕麻烦，不善于思考

11. 复盘 复什么呢？
	♥♥♥ 新的事情 
	♥♥♥ 重要的事情
	♥♥♥ 有价值的事情
	♥♥♥ 没有达到预期的事情

12. 学习闭环？
	遭遇问题：
		评估自己学到什么程度？
		如何评估？
		学着学着就不知道应该做什么了？
		知识体系是否缺陷？
	方案：
		以project为导向，作为评估
		评估之后反哺知识体系
		指定学习计划，和时间表
		基础知识->project评估->检测基础知识->project评估->. . . 

13. 看别人做什么，反思自己？
	每个人都在做着自己可能认为最有效，最正确的事情
	也许在别人看来，他做的事情本身就毫无意义，不会带来巨大的进步，至少不会是最正确的路
	这告诉我们应该如何避免这种情况呢？ 多观察 多交流 多看书 多实践 多思考 多了自然而然就明白了

14. 五步高效学习法
	通读 -- 思考 -- 梳理 -- 检验 -- 输出
	通读：解决80%的一般性知识
	思考：解决20%的重难点知识
	梳理：梳理总结成自己的知识体系(知识总结md文档，熟悉)
	检验：检验自身所学，强化熟练程度(练习)
	输出：把知识内化，达到随心所欲的境界(造轮子)   回到通读，circle

	比如说：数据结构这一块，我只是到了第三步，整理了而已，连第四步都没有到，何来第五步？
	五步法挺好的，我可以用来评估自己学一个知识点到了哪一步？有一个标准来评判了


--------反馈-------------------------------
1.	回想之前写的一个方向的枚举，没有思考，就写了几遍，不经过自己思考的东西是不属于自己的
	解决：严格执行五步法则 多回顾 多思考
